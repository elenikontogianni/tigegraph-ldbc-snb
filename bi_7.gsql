SET syntax_version = "v2"
USE GRAPH ldbc_snb
DROP QUERY bi_7

CREATE QUERY bi_7(STRING tagName) FOR GRAPH ldbc_snb {
  TYPEDEF TUPLE<INT personId, INT authorityScore> authUser;
DATETIME start=now();
  OrAccum @visited;
  SumAccum<INT> @popularityScore;
	SumAccum<INT> @authorityScore;
	SetAccum<INT> @personIds;
	MapAccum<INT, INT> @@popularityScoreMap;
  HeapAccum<authUser>(100, authorityScore DESC, personId ASC) @@authUserTop;
	
  vTag = { Tag.* };
  vPerson1 =
    SELECT t2
    FROM vTag:s
        -((<Has_Tag|<Has_Tag):e1)-(Comment|Post):t1
        -((Has_Creator>|Has_Creator>):e2)-Person:t2
    WHERE s.name == tagName
    ACCUM t1.@visited += True;

  vPerson2 =
    SELECT t2
    FROM vPerson1:s
        -((<Has_Creator|<Has_Creator):e1)-(Comment|Post):t1
        -((<Likes):e2)-Person:t2
    WHERE t1.@visited
    ACCUM s.@personIds += t2.id;

  accPopularityScore =
    SELECT s
    FROM vPerson2:s
        -((<Has_Creator|<Has_Creator):e1)-(Comment|Post):t1
        -((<Likes):e2)-Person:t2
    ACCUM s.@popularityScore += 1
    POST-ACCUM @@popularityScoreMap += (s.id -> s.@popularityScore);

  accAuthorityScore =
    SELECT v
    FROM vPerson1:v
    ACCUM 
      FOREACH p IN v.@personIds DO
        v.@authorityScore += @@popularityScoreMap.get(p)
      END
    POST-ACCUM @@authUserTop += authUser(v.id, v.@authorityScore);

  PRINT @@authUserTop;
  DATETIME end1=now();
  FLOAT latency=datetime_diff(end1,start);
  PRINT latency;
  int throuput=@@authUserTop.size();
  print throuput;
  PRINT (accAuthorityScore.size()+accPopularityScore.size()+vPerson1.size()+vPerson1.size()+vTag.size());
}

//INSTALL QUERY bi_7
//RUN QUERY bi_7("Arnold_Schwarzenegger")
SET query_timeout = 180000
INTERPRET QUERY bi_7("Arnold_Schwarzenegger")
